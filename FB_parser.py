
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Primary
import re
from time import sleep

# add param
from config import cookies_fb
from config import BOT_TOKEN
from config import time_settings

import telebot
bot = telebot.TeleBot(BOT_TOKEN)

class FacebookParser:
    def __init__(self):
        self.should_continue_parsing = True

    def stop_parsing(self):
        self.should_continue_parsing = False

    def parse_fb(self, chat_id, url):
        edge_options = Options()

        # –í–∏–º–∫–Ω—ñ—Ç—å –≤–∏–≤—ñ–¥ —Å–ø–ª–∏–≤–∞—é—á–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        edge_options.add_argument("--disable-notifications")
        
        # –°—Ç–≤–æ—Ä—ñ—Ç—å –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –æ–ø—Ü—ñ—ó Edge
        driver = webdriver.Chrome(options=edge_options)
        
        driver.get('https://www.facebook.com/profile.php?id=100095416489054')

        for cookie_name, cookie_value in cookies_fb.items():
            driver.add_cookie({'name': cookie_name, 'value': cookie_value})
        driver.refresh()
        driver.get(url)

        data = []
        last_seen_count = 0
        while self.should_continue_parsing:
            wait = WebDriverWait(driver, 5) # –ß–∏—Å–ª–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ WebDriverWait –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
            try:
                product_cards = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, 'x3ct3a4')))
            except:
                bot.send_message(chat_id, '–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòï\n–ù–∞—Ç–∏—Å–Ω–∏ —Å—Ç–∞—Ä—Ç —Ç–∞ –≤–≤–µ–¥–∏ –Ω–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏')
                break
            current_count = len(product_cards)

            if current_count > last_seen_count:
                for card in product_cards:
                    if self.should_continue_parsing is False:
                        break
                    card_link = card.find_element(By.TAG_NAME, 'a').get_attribute('href')
                    match = re.search(r'/item/(\d+)/\?', card_link)

                    if match and match.group(1) not in data:
                        item_id = match.group(1)

                        price_elements = card.find_elements(By.CLASS_NAME, 'x193iq5w')
                        img_url = card.find_element(By.TAG_NAME, 'img').get_attribute('src')
                        url_product = card_link

                        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
                        price_texts = [price.text for price in price_elements]
                        result_string = '\n'.join(price_texts)
                        text = f'–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n{result_string}\n<a href="{url_product}">–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç</a>'

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
                        bot.send_photo(chat_id, img_url, caption=text, parse_mode='HTML')
                        data.append(item_id)
                        sleep(time_settings['Message Delay'])

                # –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –≤–Ω–∏–∑ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é JavaScript (–º–æ–∂–ª–∏–≤–æ, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —Ü–µ)
                driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                sleep(3)

                last_seen_count = current_count
            else:
                bot.send_message(chat_id, '–í–∏–∫–æ–Ω—É—é –ø–µ—Ä–µ–∑–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Marketpace üîÑ')
                driver.refresh()
                for _ in range(time_settings['Refresh Delay']):
                    if self.should_continue_parsing is False:
                        break
                    sleep(1)
        driver.quit()   